version: "3"
services:
  orion:
    image: fiware/orion:3.10.1
    #image: fiware/orion-ld:1.4.0
    hostname: orion
    depends_on:
      - mongodb
    networks:
      - hostnet
    ports:
      - "1026:1026"
    command: -dbhost mongodb -logLevel DEBUG
    #command: -dbhost mongodb -logLevel DEBUG -forwarding -experimental

  draco:
   #image: draco
    build: ./build/draco
    hostname: draco
    container_name: draco
    networks:
      - hostnet
    ports:
        # NIFI web UI (https)
        - 8443:8443
        # Listen AAS
        - 8085:8085
        # Listen Orion
        - 8086:8086
    env_file:
        - conf/draco/nifi.env
    tty: true     
    volumes:
      - ./conf/draco/templates:/opt/nifi/nifi-current/templates

  mongodb:
    image: mongo:7.0.5
    hostname: mongodb
    networks:
      - hostnet
    ports:
      - 27017:27017
    command: --bind_ip_all
    volumes:
      - mongodb_volume:/data

  postgres:
    image: postgres
    hostname: postgres
    networks:
      - hostnet
    ports:
    - 5432:5432
    environment:
      POSTGRES_USER: username # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: password # The PostgreSQL password (useful to connect to the database)
      POSTGRES_DB: default_database # The PostgreSQL default database (automatically created at first launch)
    volumes:
      - postgres_volume:/var/lib/postgresql/data/

  # Settings and configurations that are common for all containers
  x-minio-common: &minio-common
    image: quay.io/minio/minio:RELEASE.2024-05-10T01-41-38Z
    command: server --console-address ":9001" http://minio{1...4}/data{1...2}
    expose:
      - "9000"
      - "9001"
    env_file:
      - ./conf/minio/minio.env
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # starts 4 docker containers running minio server instances.
  # using nginx reverse proxy, load balancing, you can access
  # it through port 9000.
  minio1:
    <<: *minio-common
    hostname: minio1
    networks:
      - hostnet
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    networks:
      - hostnet
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  minio3:
    <<: *minio-common
    hostname: minio3
    networks:
      - hostnet
    volumes:
      - data3-1:/data1
      - data3-2:/data2

  minio4:
    <<: *minio-common
    hostname: minio4
    networks:
      - hostnet
    volumes:
      - data4-1:/data1
      - data4-2:/data2

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    networks:
      - hostnet
    volumes:
      - ./conf/minio/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4

  mosquitto:
    image: eclipse-mosquitto:2.0
    hostname: mosquitto
    networks:
      - hostnet
    container_name: mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
    volumes:
      - ./conf/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf



## By default, this config uses default local driver,
## For custom volumes replace with volume driver configuration.
volumes:
  mongodb_volume:
  postgres_volume:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:

networks:
   hostnet:
