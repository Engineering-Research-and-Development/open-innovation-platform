user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  4096;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    keepalive_timeout  65;

    # include /etc/nginx/conf.d/*.conf;


    upstream docker-grafana {
        server grafana:3000;
    }

    upstream docker-nifi {
        server draco:8443;
    }

    upstream docker-nodered {
        server pcm:1880;
    }

    upstream docker-iotagentopcua {
        server iotagent-opcua:4041;
    }

    upstream docker-iotagentjson {
        server iotagent-json:4042;
    }

    upstream docker-iotagentaas {
        server iotagent-aas:4043;
    }

    upstream docker-orion {
        server orion:1026;
    }

    upstream docker-keycloak {
        server keycloak:8080;
    }

    upstream docker-ioagent-ui-spa {
        server iotagent-ui-spa:8087;
    }

    upstream docker-ioagent-ui-bff {
        server iotagent-ui-bff:9005;
    }

    upstream minio {
        server minio1:9000;
        server minio2:9000;
        server minio3:9000;
        server minio4:9000;
    }

    upstream console {
        ip_hash;
        server minio1:9001;
        server minio2:9001;
        server minio3:9001;
        server minio4:9001;
    }


    server {
        #listen       80;
        #server_name  servernameORipaddress;


        listen 443 ssl;
	    server_name servernameORipaddress;
        ssl_certificate     /etc/nginx/pathto.pem;
        ssl_certificate_key /etc/nginx/pathto.key;


        auth_basic "Restricted Content";
        auth_basic_user_file /etc/nginx/.htpasswd;


        # To allow special characters in headers
        ignore_invalid_headers off;
        # Allow any size file to be uploaded.
        # Set to a value such as 1000m; to restrict file size to a specific value
        client_max_body_size 0;
        # To disable buffering
        proxy_buffering off;
        proxy_request_buffering off;

        location /grafana {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass http://docker-grafana;

            #proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            #proxy_set_header Connection $connection_upgrade;
            rewrite ^/grafana/(.*) /$1 break;

        }

        location /grafana/api/live/ {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            #proxy_set_header Connection $connection_upgrade;
            proxy_pass http://docker-grafana;
        }

        location /draco {
            proxy_pass https://docker-nifi;

	        proxy_set_header X-ProxyScheme https;
	        proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_set_header X-ProxyContextPath /draco;
	        proxy_set_header X-ProxyScheme "https";
            proxy_set_header X-ProxyHost "proxyhost";
            proxy_set_header X-ProxyPort "443";

            #rewrite ^/nifi/(.*) /$1 break;
	        rewrite /draco/(.*) /$1 break;

            #rewrite /(.*) /$1 break;
        }



        location /nifi-api {
            proxy_pass https://docker-nifi;

            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_set_header X-ProxyContextPath /nifi;

            rewrite ^/nifi-api/(.*) /$1 break;

        }


        location /nodered {
            proxy_pass http://docker-nodered;

            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            rewrite ^/nodered/(.*) /$1 break;

        }

	    location /iotagentopcua {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass http://docker-iotagentopcua;

            #proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            #proxy_set_header Connection $connection_upgrade;
            rewrite ^/iotagentopcua/(.*) /$1 break;

        }

        location /iotagentjson {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass http://docker-iotagentjson;

            #proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            #proxy_set_header Connection $connection_upgrade;
            rewrite ^/iotagentjson/(.*) /$1 break;

        }

        location /iotagentaas {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass http://docker-iotagentaas;

            #proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            #proxy_set_header Connection $connection_upgrade;
            rewrite ^/iotagentaas/(.*) /$1 break;

        }

        location /iotagent-ui-spa {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass http://docker-iotagent-ui-spa;

            #proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            #proxy_set_header Connection $connection_upgrade;
            rewrite ^/iotagent-ui-spa/(.*) /$1 break;

        }

        location /iotagent-ui-bff {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass http://docker-iotagent-ui-bff;

            #proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            #proxy_set_header Connection $connection_upgrade;
            rewrite ^/iotagent-ui-bff/(.*) /$1 break;

        }

        location /orion {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass http://docker-orion;

            #proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            #proxy_set_header Connection $connection_upgrade;
            rewrite ^/orion/(.*) /$1 break;

        }


    }

    server {
        listen       9000;
        listen  [::]:9000;
        server_name  localhost;

        # To allow special characters in headers
        ignore_invalid_headers off;
        # Allow any size file to be uploaded.
        # Set to a value such as 1000m; to restrict file size to a specific value
        client_max_body_size 0;
        # To disable buffering
        proxy_buffering off;
        proxy_request_buffering off;

        location / {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 300;
            # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            chunked_transfer_encoding off;

            proxy_pass http://minio;
        }
    }

    server {
        listen       9001;
        listen  [::]:9001;
        server_name  localhost;

        # To allow special characters in headers
        ignore_invalid_headers off;
        # Allow any size file to be uploaded.
        # Set to a value such as 1000m; to restrict file size to a specific value
        client_max_body_size 0;
        # To disable buffering
        proxy_buffering off;
        proxy_request_buffering off;

        location / {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-NginX-Proxy true;

            # This is necessary to pass the correct IP to be hashed
            real_ip_header X-Real-IP;

            proxy_connect_timeout 300;

            # To support websocket
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            chunked_transfer_encoding off;

            proxy_pass http://console;
        }
    }
}